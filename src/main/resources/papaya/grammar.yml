struct_type:
  module
  struct
  class
  contract
structure:
  struct_type ident '{' class_member* '}'
method:
  access_mod* fn ident '(' method_arguments* ')' '{' statement* '}'
field:
  access_mod* ident '(' function_arguments* ')' ident
  access_mod* ident ident '=' expression
  access_mod* ident ident
identifiers:
  ident ',' identifiers
  ident
variable:
  'let' identifiers '=' expression
  ident ident '=' expression
  ident ident
method_arguments:
  ident ident ',' method_arguments
  ident ident
function_arguments:
  expression ',' function_arguments
  expression
class_member:
  field
  method
cast:
  '(' ident ')'
tuple:
  '(' tuple_expressions ')'
tuple_expressions:
  expression ',' tuple_expressions
  expression
lambda_expression:
  '(' method_arguments ')' '=>' '{' statement* '}'
assignment:
  member_access '=' expression
basic_expression:
  member_access '[' basic_expression ']'
  member_access
  logical_not
  bitwise_not
  int
  dec
  cast basic_expression
expression:
  mul_exp
  add_exp
  shift_exp
  comparison_exp
  equality_exp
  bitwise_and
  bitwise_or
  logical_and
  logical_or
  basic_expression
  lambda_expression
  tuple
  '(' expression ')'
member:
  function_call
  ident
member_access:
  member '.' member_access
  member
function_call:
  ident '(' function_arguments* ')'
ternary_statement:
  '?' expression ':' function_call
statement:
  '++' member_access
  '--' member_access
  member_access '++'
  member_access '--'
  assignment
  variable
  ternary_statement
  return tuple_expressions
logical_not:
  '!' basic_expression
bitwise_not:
  '~' basic_expression
mul_atm:
  '*' basic_expression
  '/' basic_expression
  '%' basic_expression
mul_exp:
  basic_expression '*' basic_expression mul_atm*
  basic_expression '/' basic_expression mul_atm*
  basic_expression '%' basic_expression mul_atm*
  basic_expression
add_atm:
  '+' mul_exp
  '-' mul_exp
add_exp:
  mul_exp '+' mul_exp add_atm*
  mul_exp '-' mul_exp add_atm*
shift_atm:
  '>>' add_exp
  '>>>' add_exp
  '<<' add_exp
shift_exp:
  add_exp '>>' add_exp shift_atm*
  add_exp '>>>' add_exp shift_atm*
  add_exp '<<' add_exp shift_atm*
comparison_atm:
  '>=' shift_exp
  '<=' shift_exp
  '>' shift_exp
  '<' shift_exp
comparison_exp:
  shift_exp '>=' shift_exp comparison_atm*
  shift_exp '<=' shift_exp comparison_atm*
  shift_exp '>' shift_exp comparison_atm*
  shift_exp '<' shift_exp comparison_atm*
equality_atm:
  '==' comparison_exp
  '!=' comparison_exp
equality_exp:
  comparison_exp '==' comparison_exp equality_atm*
  comparison_exp '!=' comparison_exp equality_atm*
bitwise_and_atm:
  '&' equality_exp
bitwise_and:
  equality_exp '&' equality_exp bitwise_and_atm*
bitwise_or_atm:
  '|' bitwise_and
bitwise_or:
  bitwise_and '|' bitwise_and bitwise_or_atm*
logical_and_atm:
  '&&' bitwise_or
logical_and:
  bitwise_or '&&' bitwise_or logical_and_atm*
logical_or_atm:
  '||' logical_and
logical_or:
  logical_and '||' logical_and logical_or_atm*
